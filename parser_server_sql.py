from flask import request, Flask
from prompt_continuation import llm_generate
import logging
import re

app = Flask(__name__)

logging.basicConfig(level=logging.INFO, format=' %(name)s : %(levelname)-8s : %(message)s')


# Set the server address
host = "127.0.0.1"
port = 8601
GPT_parser_address = 'http://{}:{}'.format(host, port)

def process_user_target(user_target: str):
    return user_target

class SemanticParser():
    def __init__(self):
        self.dlg_turns = []
        
    def parse(self, data):
        query = data.get('q')
        continuation, _ = llm_generate(template_file='prompts/parser.prompt',
                        engine='gpt-35-turbo',
                        stop_tokens=["Agent:"],
                        max_tokens=300,
                        temperature=0,
                        prompt_parameter_values={'dlg': self.dlg_turns, 'process_user_target': process_user_target, 'query': query},
                        postprocess=False)
        
        continuation = continuation.rstrip("Agent:")
        print("parse before syntactic processing " + continuation)
        
        # some syntactic sugars
        
        # on popular dishes:
        # add soft match
        continuation = continuation.replace(' contains(popular_dishes', ' ~contains(popular_dishes')
        # replace `restaurant_dish` to simple string
        continuation = re.sub(r'null\^\^com\.yelp\:restaurant_dish\((.*?)\)', r'\1', continuation)
        
        # on id:
        # "!= id", e.g., change `id != "Firehouse No.1 Gastropub"` to `!in_array~(id, ["Firehouse No.1 Gastropub"])`
        continuation = re.sub('id != \"(.*?)\"', r'!in_array~(id, ["\1"])', continuation)
        # change `except id =~ "Evvia Estiatorio"` to `!in_array~(id, ["Evvia Estiatorio"])`
        # continuation = re.sub('except id =~ \"(.*?)\"', r'!in_array~(id, ["\1"])', continuation)
        
        # on location: get rid of all lat and long generated by GPT
        continuation = re.sub(r'new Location\([-+]*\d*\.\d*, [-+]*\d*\.\d*, ', 'new Location (', continuation)
        
        # on cuisine: post process to add cuisine
        # TODO: implement a "reverse syntactic sugar"
        continuation = re.sub(r'contains\(cuisines, \"(.*?)\"\)', r'contains(cuisines, null^^com.yelp:restaurant_cuisine("\1"))', continuation)
        
        # put the result in a list since this is what genie accepts as of now
        thingtalk_res = ['$dialogue @org.thingpedia.dialogue.transaction.execute; $continue ' + continuation]
        print("parse after syntactic processing " + continuation)
        
        result = {
            'candidates': [
                {
                    "code": thingtalk_res,
                    "score": 1
                }
            ],
            'entities': {},
            'intent': {
                'command': 1,
                'ignore': 0,
                'other': 0
            },
            'tokens': ['show', 'me']
        }
        
        return result
    
    def set_dlg_turns(self, data):
        self.dlg_turns = data["dlg_turn"]
        return self.dlg_turns


if __name__ == '__main__':
    s = SemanticParser()

    @app.route('/en-US/query', methods=['POST'])
    def query():
        data = request.get_json()
        return s.parse(data)

    @app.route('/set_dlg_turn', methods=['POST'])
    def set_dlgs_turns():
        data = request.get_json()
        return s.set_dlg_turns(data)

    app.run(host=host, port=port)